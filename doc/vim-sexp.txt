Symbolic Expression manipulation                                *vim-sexp.txt*

            o8o
            '"'
oooo    ooooooo ooo. .oo.  .oo.        .oooo.o  .ooooo. oooo    ooooo.ooooo.
 `88.  .8' `888 `888P"Y88bP"Y88b      d88(  "8 d88' `88b `88b..8P'  888' `88b
  `88..8'   888  888   888   888 8888 `"Y88b.  888ooo888   Y888'    888   888
   `888'    888  888   888   888      o.  )88b 888    .o .o8"'88b   888   888
    `8'    o888oo888o o888o o888o     8""888P' `Y8bod8P'o88'   888o 888bod8P'
                                                                    888
                                                                   o888o

==============================================================================
I. INTRODUCTION                                        *vim-sexp-introduction*

Symbolic Expressions are the simplest way to express recursive tree-like
structures with text, and give Lisps their distinctive look and feel. Emacs
users know that what appear to be a preponderance of brackets are really hooks
the editor may use to effortlessly transform the text before them.

Vim, possessing |text-objects|, |cursor-motions|, and an |operator-pending|
mode, is well suited for editing structured text. This plugin extends these
ideas to S-Expressions as embodied by both classical Lisps like Scheme and new
Lisps like Clojure.

A handful of features found in the popular S-Expression plugin for emacs,
paredit.el, are also provided.

==============================================================================
II. MAPPINGS                                               *vim-sexp-mappings*

This is the list of mappings provided by vim-sexp grouped by type. The default
mapping is shown on the left and the full <Plug> name on the right.

Note that all actions that result in visual selections will always be
|characterwise|, regardless of the current visual state.

If vim-repeat [1] is installed, repeating the last change with the |.| command
will work as expected, even for changes made with operator-pending commands.

[1]: http://www.vim.org/scripts/script.php?script_id=2136

TEXT OBJECTS~

af                                                    *sexp_select_list_outer*
if                                                    *sexp_select_list_inner*
        Select [count] lists (compound FORMS) delimited by any of '(' and ')',
        '[' and ']', or '{' and '}'. Outer motion includes the delimiting
        brackets and the inner motion excludes them.

        Does not include surrounding whitespace.

aF                                                *sexp_select_top_list_outer*
iF                                                *sexp_select_top_list_inner*
        Select the current top-level list (compound FORM) delimited by any of
        '(' and ')', '[' and ']', or '{' or '}'. Outer motion includes the
        delimiting brackets and the inner motion excludes them.

        Does not include surrounding whitespace.

        If |g:sexp_maxlines| is -1, the top list is determined to be the
        first parent list with a opening bracket on the first column. This is
        typically much faster than calling |searchpairpos()| recursively.

as                                                  *sexp_select_string_outer*
is                                                  *sexp_select_string_inner*
        Select the current string or regular expression. Outer motion includes
        surrounding quotes, inner motion excludes them.

        Does not include surrounding whitespace.

        The default mappings shadow the internal |as| and |is| mappings. These
        sentence text-objects are of limited use in code buffers, but if this
        conflict bothers you, see |g:sexp_mappings| for documentation on
        changing the default mappings.

ae                                                 *sexp_select_element_outer*
ie                                                 *sexp_select_element_inner*
        Select the current element. An element is defined as:

            * Current string if cursor is in a string
            * Current comment if cursor is in a comment, or in the whitespace
              between two line comments
            * Current compound form if cursor is on a paired bracket
            * Current sequence of leading macro characters and following
              element if cursor is on a macro character
            * Current atom otherwise

        An element always includes leading macro characters.

        Inner motion does not include surrounding whitespace, but the outer
        motion includes (ordered by priority):

            * Trailing whitespace up to the next element if next element is on
              the same line
            * Trailing whitespace up to the next element on a subsequent line
              if the current element begins on its own line
            * Trailing whitespace up to the end of line if the current element
              is preceded by another element on the same line
            * Leading whitespace up to the previous element if it exists on
              the same line as the current element and no trailing whitespace
              exists

        If the cursor is on whitespace that is not in a string or between line
        comments, the next element in the buffer is selected.

CURSOR MOTIONS~

(                                                  *sexp_move_to_prev_bracket*
)                                                  *sexp_move_to_next_bracket*
        [count] paired brackets backward or forward. |exclusive| motion.

        When used in |operator-pending| mode, the following exceptions apply:

            * Backward motion excludes the foremost bracket
            * Forward motion from a bracket excludes both the current bracket
              and the last bracket, unless the resulting selection is empty,
              in which case the motion includes both brackets

        The default mappings shadow the internal |(| and |)| mappings. These
        sentence cursor motions are of limited use in code buffers, but if
        this conflict bothers you, see |g:sexp_mappings| for documentation on
        changing the default mappings.

<M-b>                                              *sexp_move_to_prev_element*
<M-w>                                              *sexp_move_to_next_element*
<M-B>                                       *sexp_move_to_end_of_prev_element*
<M-e>                                       *sexp_move_to_end_of_next_element*
[[                                             *sexp_move_to_prev_top_element*
]]                                             *sexp_move_to_next_top_element*
[e                                                  *sexp_select_prev_element*
]e                                                  *sexp_select_next_element*
<LocalLeader>i                                     *sexp_list_wrap_round_head*
<LocalLeader>I                                     *sexp_list_wrap_round_tail*
<LocalLeader>[                                    *sexp_list_wrap_square_head*
<LocalLeader>]                                    *sexp_list_wrap_square_tail*
<LocalLeader>{                                     *sexp_list_wrap_curly_head*
<LocalLeader>}                                     *sexp_list_wrap_curly_tail*
<LocalLeader>W                                  *sexp_element_wrap_round_head*
<LocalLeader>w                                  *sexp_element_wrap_round_tail*
<LocalLeader>e[                                *sexp_element_wrap_square_head*
<LocalLeader>e]                                *sexp_element_wrap_square_tail*
<LocalLeader>e{                                 *sexp_element_wrap_curly_head*
<LocalLeader>e}                                 *sexp_element_wrap_curly_tail*
<LocalLeader>o                                                *sexp_lift_list*
<LocalLeader>O                                              *sexp_splice_list*
<LocalLeader>h                                      *sexp_insert_at_list_head*
<LocalLeader>l                                      *sexp_insert_at_list_tail*
<M-k>                                                *sexp_swap_list_backward*
<M-j>                                                 *sexp_swap_list_forward*
<M-h>                                             *sexp_swap_element_backward*
<M-l>                                              *sexp_swap_element_forward*
<M-S-j>                                              *sexp_emit_first_element*
<M-S-k>                                               *sexp_emit_last_element*
<M-S-h>                                            *sexp_capture_prev_element*
<M-S-l>                                            *sexp_capture_next_element*

 vim:tw=78:et:sw=8:sts=8:ts=8:ft=help:norl:
